#include <bits/stdc++.h>
using namespace std;

#define yes cout << "YES" << "\n"
#define no cout << "NO" << "\n"
#define next "\n"

const int N = 1e5 + 5;
const int MOD = 1e9 + 7;
//vector<int>g[N]


void solve() {
    int n;
    cin >> n;
    vector<long long int>v(n);
    for(int i=0;i<n;i++){
        cin>>v[i];
    }
    long long int max_sum = v[0];
    long long int current_sum = v[0];
    for(int i=1;i<n;i++){
        current_sum = max(v[i], current_sum+v[i]);
        max_sum = max(max_sum,current_sum);
    }
    cout<<max_sum<<next;
}



int32_t main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t=1;
    //cin >> t;
    while (t--)
    {
        solve();
    }

    return 0;
}

//why the f does it work. For an array of all positive interger, the whole array would be the maximum subarray. but what about a array with both negative and postive int. 
// lets say the array is -1,-2,-3,0,1,2,3,4-1,-2. our inital sum = -1, for -2, the sum is -2, but since -1>-3,. the sum remains -1, same way we come to 1, now current sum = -1(because we are taking the max value).
//so we start adding, and when we come to -1 and -2, we go down, but we already have our maximum value. 
