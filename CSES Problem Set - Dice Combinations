#include <bits/stdc++.h>
using namespace std;

#define yes cout << "YES" << "\n"
#define no cout << "NO" << "\n"
#define next "\n"

const int N = 1e5 + 5;
const int MOD = 1e9 + 7;
//vector<int>g[N]


void solve()
{
    int n;
    cin>>n;
    vector<int>dp(n+1,0);
    dp[0] = 1;
    for(int i=1;i<=n;i++){
        for(int j = 1;j<=6;j++){
            if(i-j >= 0){
                dp[i] = (dp[i] + dp[i-j])%MOD;
            }
        }
    }
    cout<<dp[n]<<next;
}



int32_t main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t=1;
    //cin >> t;
    while (t--)
    {
        solve();
    }

    return 0;
}


// so my initial thought was to just use 2^(n-1), since it works for 3,4,5,6.... but after confirming with chatgpt, the result for 7 is 63 and 8 was 125 i'm sure. so that isn't the right approach.
//what we did here was just took a dp array, initialized t's first value as 1. Since one can oly be represented with 1. 
// for dp[1] or value 2, it can be represented as 1+1, or 2, so 2 ways, we use the dp[i] = dp[i]+dp[i-j] whenever i-j>=0. soo.
//let's say the value of i = 3,, j = 1, the i - j == 2, so we put dp[3] = dp[3] + dp[3-1], since dp[3] was initiallly0, now it's 2,
//now j = 2, 3-2 = 1, so we now add dp[3] and dp[1]. mathematically this is the finest way to add..
